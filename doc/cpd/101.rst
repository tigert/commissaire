CPD-101: Key Storage Encryption
===============================

Metadata
--------

* CPD Version: 1
* Status: Open

Description
-----------
Today we are holding keys the same way that secrets are used in some container managers.
Instead of holding keys in base64 and assuming that the ``Storage`` instance is used
only for Commissaire, we could encrypt the keys to add another layer of safety.

Rationale
---------
The likelihood of having a ``Storage`` system that is used only for Commissaire seems
low. More than likely the same instance will be used for other applications as well.
By adding encryption to the keys we could mitigate access from those with access to
data dumps and storage system access.


Design
------
The ``StorageService`` instances would house a GnuPG configuration and keys allowing
them to encrypt and decrypt data. The instances would need to do one of the following:

* all have the same key
* each instance have a copy of other instances public keys
* use the bus to request the encryption key if the local key store is empty


Additional Libraries
~~~~~~~~~~~~~~~~~~~~
To facilitate easy access to GnuPG, `python-gnupg <http://pythonhosted.org/gnupg/>`_ would
need to be installed. This library utilizes ``gpg`` directly so it would need to be
available as well.


StorageService Updates
~~~~~~~~~~~~~~~~~~~~~~
The StorageService would need to handle decrypting the key back into a base64 encoded
string before handing it back to the requesting service.


Model Updates
~~~~~~~~~~~~~
A way to denote encrypted data in a model will need to be added. This will allow the
``StorageService`` to note when a field needs decrypting. This would likely be an
item set in the ``_attribute_map``.


Example Code
~~~~~~~~~~~~
These are examples and likely will not work without modification.

**Encryption Class**

.. code-block:: python

   import base64
   import gnupg


   class Encryption:

       def __init__(self, passphrase, verbose=False):
           self.__passphrase = passphrase
           self._encryptor = gnupg.GPG(
               homedir='/etc/commissaire/gpg/'
               verbose=verbose)

       def _b64decode(self, data):
           try:
               return base64.decodebytes(data)
           except base64.binascii.Error:
               # Not base64 encoded
               return data

       def _b64encode(self, data):
           return base64.encodebytes(data)

       def encrypt(self, data, fingerprint):
           # Decode the input and encode the result
           return self._b64encode(self._encryptor.encrypt(
               self._b64decode(data), fingerprint))

       def decrypt(self, data):
           return self._encryptor.decrypt(
               self._b64decode(data), self.__passphrase)


**Host Model Example**

.. code-block:: python

   class Host(Model):
       """
       Representation of a Host.
       """
       _json_type = dict
       _attribute_map = {
           'address': {'type': str},
           'status': {'type': str},
           'os': {'type': str},
           'cpus': {'type': int},
           'memory': {'type': int},
           'space': {'type': int},
           'last_check': {'type': str},
           'ssh_priv_key': {'type': str, 'encrypted': True},
           'remote_user': {'type': str},
           'source': {'type': str},
       }
       ...


Documentation Updates
~~~~~~~~~~~~~~~~~~~~~
Documentation would need to be updated to clarify the following:

* The bus component will need to be considered secure
* Some bus backends will need to use stunnel (and include an example)
* Information about the GnuPG key store

Migration Tool
~~~~~~~~~~~~~~
A migration tool to encrypt keys that are currently stored would need to be
created.

Checklist
---------
* breaks API backward compatibility
* breaks user interaction backward compatibility
* **requires new or replaces current libraries**

User Story
----------
In order to increase security
I would like encryption to be added to key storage
so that those with access to the data do not get direct access to keys.

Acceptance Criteria
-------------------
* Verify that a design document is created
* Verify the document is reviewed by at least one other developer
* Verify implementation card(s) are created

References
----------
* `Kubernetes Secrets <https://kubernetes.io/docs/user-guide/secrets/>`_
* `GnuPG <https://www.gnupg.org/>`_
* `python-gnupg <http://pythonhosted.org/gnupg/>`_
* `Kombu Connection <http://docs.celeryproject.org/projects/kombu/en/latest/reference/kombu.connection.html>`_
