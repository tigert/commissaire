CPD-101: Key Storage Encryption
===============================

Metadata
--------

* CPD Version: 1
* Status: Open

Description
-----------
Today we are holding keys the same way that secrets are used in some container managers.
Instead of holding keys in base64 and assuming that the ``Storage`` instance is used
only for Commissaire, we could encrypt keys, credentials and other secrets to add
another layer of safety.

Rationale
---------
The likelihood of having a ``Storage`` system that is used only for Commissaire seems
low. More than likely the same instance will be used for other applications as well.
By adding encryption to sensitive data we could mitigate access from those with direct
access to data dumps and storage systems.


Design
------
The ``StorageService`` would be updated to know what data would be backed through Custodia
rather than the other storage handler(s).

- Install and setup of a Custodia instance would be part of a Commissaire install and configuration.
- Custodia would be configured to use an etcd backend.
- Custodia would be configured to use unix socket communication.
- Commissaire's Storage Service would be updated to store credentials and ssh keys via Custodia.


::

                     +-----------------+
     Data Request    |                 |
   +---------------->+ Storage Service |
                     |                 | +---------------+
                     +-------+---------+ |               |
                             |           |   Custodia    |
                             |           |               |
                             |           +---------------+
                             v                 ^
                     +-------+-------+      Yes|
                     |               |         |
                     |    Secret?    +---------+
                     |               |         |
                     +---------------+       No|
                                               |
                                               |
                                               v
                                         +-----------------------+
                                         |                       |
                                         |   Storage Handler(s)  |
                                         |                       |
                                         +-----------------------+



Additional Libraries
~~~~~~~~~~~~~~~~~~~~
`Custodia <https://custodia.readthedocs.io/en/latest/>`_ would be a required subsystem.
Custodia would be installed as part of Commissaire.


StorageService Updates
~~~~~~~~~~~~~~~~~~~~~~
The StorageService would need to to know when to use Custodia versus the configured
``StorageHandler``(s). It would look at the ``_secrets`` attribute on the instance and,
if set to ``True`` would use the secrets handler.

The secrets handler would be automatically added to the ``StorageHandlerManager`` and
would require no special configuration by the operator.


Model Updates
~~~~~~~~~~~~~
Sensitive items would be pulled out from the ``Host`` model into it's own model. For simplicity,
the model should be named after the REST endpoint that has traditionally returned the data: ``HostCreds``.
The models would match based on their primary keys: ``address``.

The ``Model`` class would also gain a new attribute to denote the model is secret. A secret model would
denote ``_secrets = True``.


Example Code
~~~~~~~~~~~~
These are examples and likely will not work without modification.

**Model Updates**

.. code-block:: python

    class Model(object):
        """
        Parent class for models.
        """

        _json_type = None
        #: Dict of attribute_name->{type, regex}. Regex is optional.
        _attribute_map = {}
        #: Attributes which should only be shown if the render is 'secure'
        _hidden_attributes = ()
        #: The primary way of looking up an instance
        _primary_key = None
        #: Defaults to use for attributes when calling new()
        _attribute_defaults = {}
        #: The attribute name which stores items if this is a list type
        _list_attr = None
        #: The class for items which will be stored in the list attribute
        _list_class = None
        #: If the model must be saved via the secrets storage rather than general StorageHandler(s)
        _secret = False

        # ...


    class Host(Model):
        """
        Representation of a Host.
        """
        _json_type = dict
        _attribute_map = {
            'address': {'type': str},
            'status': {'type': str},
            'os': {'type': str},
            'cpus': {'type': int},
            'memory': {'type': int},
            'space': {'type': int},
            'last_check': {'type': str},
            'source': {'type': str},
        }
        _attribute_defaults = {
            'address': '', 'status': '', 'os': '', 'cpus': 0,
            'memory': 0, 'space': 0, 'last_check': '', 'source': ''}
        _primary_key = 'address'


    class HostCreds(Model):
        """
        Representation of Host credentials.
        """
        _json_type = dict
        _secret = True
        _attribute_map = {
            'address': {'type': str},
            'ssh_priv_key': {'type': str},
            'remote_user': {'type': str},
        }
        _attribute_defaults = {
            'ssh_priv_key': '',
            'remote_user': 'root',
        }
        _primary_key = 'address'

**StorageHandlerManager Updates**

.. code-block:: python

    def _get_handler(self, model):
        """
        Looks up, and if necessary instantiates, a StoreHandler instance
        for the given model.  If the model stores secrets the secrets
        handler is used. Raises KeyError if no handler is registered
        for that type of model.
        """
        if model._secret:
            handler = self._handlers.get('secret')  # Just an example
        else:
            handler = self._handlers.get(type(model))

        if handler is None:
            # Let this raise a KeyError if the registry lookup fails.
            handler_type, config, model_types = self._registry[type(model)]
            handler = handler_type(config)
            self._handlers.update({mt: handler for mt in model_types})
        return handler


Documentation Updates
~~~~~~~~~~~~~~~~~~~~~
Documentation would need to be updated to clarify the following:

* Sensitive data is stored encrypted
* How to access the secrets store
* Information pointing to Custodia

Migration Tool
~~~~~~~~~~~~~~
A migration tool to encrypt keys that are currently stored would need to be
created.

Checklist
---------
* breaks API backward compatibility
* breaks user interaction backward compatibility
* **requires new or replaces current libraries**

User Story
----------
In order to increase security
I would like encryption to be added to secrets storage
so that those with access to the data do not get direct access to sensitive data.

Acceptance Criteria
-------------------
* Verify a card for installing custodia is created
* Verify a card is created for updating commissaire-service
* Verify a card is created for adding/updating models and updating model usage

References
----------
* `Kubernetes Secrets <https://kubernetes.io/docs/user-guide/secrets/>`_
* `Custodia <https://custodia.readthedocs.io/en/latest/>`_
